generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Define Enums

enum Role {
  USER
  ADMIN
}

enum Round {
  ROUND1
  ROUND2
  QUARTERFINAL
  SEMIFINAL
  FINAL
}

enum CrewRole {
  DRIVER
  CREWIE
  PATIENT
}

enum RaceTeam {
  A
  B
  C
}

enum RaceCrewType {
  STANDARD
  EXTRAPATIENT
  EXTRACREW
}

// Define Models
 
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  image     String
  clubId    Int
  club      Club     @relation(fields: [clubId], references: [id])
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Carnival {
  id        Int      @id @default(autoincrement())
  name      String
  startDate DateTime   
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  races     Race[]
}

model CrewMember {
  id        Int      @id @default(autoincrement())
  name      String
  isDriver  Boolean
  clubId    Int
  club      Club     @relation(fields: [clubId], references: [id])
  photo     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  crewAssignments RaceCrewAssignment[]
}

model Race {
  id         Int      @id @default(autoincrement())
  carnivalId Int
  carnival   Carnival @relation(fields: [carnivalId], references: [id])
  description String
  order      Int
  goThrough  Int
  numRaces   Int
  currentHeatNum Int @default(1)
  round      Round
  raceCrewType RaceCrewType
  isCompleted Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  crewAssignments RaceCrewAssignment[]
  heats     Heat[]
}

model RaceCrewAssignment {
  id         Int        @id @default(autoincrement())
  raceId     Int
  race       Race       @relation(fields: [raceId], references: [id])
  crewMemberId Int
  crewMember CrewMember @relation(fields: [crewMemberId], references: [id])
  role       CrewRole
  heat       Int        @default(1)
  raceTeam   RaceTeam   @default(A)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())

  @@unique([raceId, crewMemberId, role]) // Ensures a crew member can only have one role per race
}

model Club {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  crewMembers CrewMember[]
  users      User[]
}

model Heat {
  id        Int      @id @default(autoincrement())
  heatNum   Int
  result    Int?
  raceId    Int
  race      Race       @relation(fields: [raceId], references: [id])
  isCompleted Boolean @default(false)
  isCurrent   Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

